import path from "node:path";
import fs from "node:fs/promises";
import chalk from "chalk";
import { fileName, IndexFeature, IndexFiles, ParsedIndex } from "./config";

function exportFilePath(
  relativePath: string,
  language: string,
  features: IndexFeature[],
) {
  if (language === "typescript") {
    return relativePath.replace(
      /\.ts$/,
      features.includes("module") ? ".js" : "",
    );
  }

  if (language === "javascript") {
    return relativePath.replace(
      /\.js$/,
      features.includes("module") ? ".js" : "",
    );
  }

  return relativePath;
}

function generatedFileContent(contentLines: string[]) {
  return [
    `// This file is generated by export-index, Do not modify this file manually`,
    ...contentLines,
    "",
  ].join("\n");
}

async function generateExportAll(index: ParsedIndex, indexFile: string) {
  const contentLines: string[] = index.files
    .map((file) => {
      const filename = exportFilePath(
        file.relativePath,
        index.language || "typescript",
        index.features || [],
      );

      if (file.source === indexFile) {
        return "";
      }

      return `export * from "${filename}";`;
    })
    .filter(Boolean);

  await fs.writeFile(indexFile, generatedFileContent(contentLines));
}

export async function generateIndex(index: ParsedIndex) {
  const indexFile = path.join(
    index.dir,
    IndexFiles[index.language || "typescript"],
  );

  console.log(
    chalk.blue("Creating index: %s"),
    path.relative(process.cwd(), indexFile),
  );
  if (!index.exportFormat || index.exportFormat === "all") {
    await generateExportAll(index, indexFile);
    return;
  }
}

export async function generateInitConfiguration() {
  await fs.writeFile(
    fileName,
    JSON.stringify(
      {
        language: "typescript",
        exportFormat: "all",
        indexes: [
          {
            dir: "src",
          },
        ],
      },
      null,
      2,
    ),
  );
}
